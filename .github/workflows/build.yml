name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
        DOTNET_NOLOGO: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: setup
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
#    - name: Cache SonarCloud packages
#    uses: actions/cache@v2
#    env:
#      cache-name: cache-sonar-${{ runner.os }}
#    with:
#        path: .\.sonar
#        key: ${{ runner.os }}-sonar
#        restore-keys: ${{ runner.os }}-sonar
#    - name: Cache SonarCloud scanner
#    id: cache-sonar-scanner
#    uses: actions/cache@v2
#    with:
#        path: .\.sonar\scanner
#        key: ${{ runner.os }}-sonar-scanner
#        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
#    if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
    run: |
        mkdir -p .\.sonar\scanner
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Build and analyze
    env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"ku3mich_NUnit2XUnit" /o:"ku3mich" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="NUnit2XUnit.Tests/coverage.opencover.xml"
        dotnet build
        dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover NUnit2XUnit.Tests
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
